(ns projecteuler-clojure.core
  (:gen-class))


(defn problem1[]
  ; If we list all the natural numbers below 10 that are multiples of 3 or 5,
  ; we get 3, 5, 6 and 9. The sum of these multiples is 23.
  ; Find the sum of all the multiples of 3 or 5 below 1000.
  (->> (range 1000)
       (filter #(or (== 0 (mod % 5))
                    (== 0 (mod % 3))))
       (reduce +)))



(defn fib-next [[fib1 fib2 number]]
  [fib2 (+ fib1 fib2) (inc number)])

(def fib-seq (iterate fib-next [1N 1N 1N]))

(def fibonacci (rest (map first fib-seq)))


; Each new term in the Fibonacci sequence is generated by adding the previous two terms.
; By starting with 1 and 2, the first 10 terms will be
; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
; By considering the terms in the Fibonacci sequence whose values do not exceed
; four million, find the sum of the even-valued terms.

(defn problem2[]
  (->> fibonacci
       (take-while #(< % 4000000))
       (filter #(== 0 (mod % 2)))
       (reduce +)
       ))

(def problem-func-map
  {1 problem1,
   2 problem2})


(defn -main
  [& args]
  (if (not= 1 (count args))
    (println "Give problem number as argument")
    (let [solver (problem-func-map (Integer. (first args)))]
      (if solver
        (println (solver))
        (println "Not solved yet")))))
